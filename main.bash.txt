# the codes run in raspbery pi

sudo apt update
sudo apt upgrade

# this code install the cec-utils package
sudo apt install cec-utils

# Scan for HDMI-CEC capable devices by running the following command on your Raspberry Pi.

echo 'scan' | cec-client -s -d 1

# Once you have either the device number or device address, you can begin to send commands to it.
# Using the cec-client to turn on your device is a relatively easy process.


echo 'on <DEVICEADDRESS>' | cec-client -s -d 1


# For example, if we wanted to turn on our samsung TV that has the address of “0.0.0.0“, we would make use of the command like below.

echo 'on 0.0.0.0' | cec-client -s -d 1

# If you would like to turn your TV off (Put it into standby) using your Raspberry Pi, you can also do this easily using HDMI-CEC.
echo 'standby <DEVICEADDRESS>' | cec-client -s -d 1

# Like most HDMI-CEC commands, it is relatively easy to make use of this. All you need to do is reference pow followed by the device address.

echo 'pow 0.0.0.0' | cec-client -s -d 1

# the result will be:
###
(opening a connection to the CEC adapter...
power status: standby)
####

### list of all commands that can be used. 
================================================================================
Available commands:

[tx] {bytes}              transfer bytes over the CEC line.
[txn] {bytes}             transfer bytes but don't wait for transmission ACK.
[on] {address}            power on the device with the given logical address.
[standby] {address}       put the device with the given address in standby mode.
[la] {logical address}    change the logical address of the CEC adapter.
[p] {device} {port}       change the HDMI port number of the CEC adapter.
[pa] {physical address}   change the physical address of the CEC adapter.
[as]                      make the CEC adapter the active source.
[is]                      mark the CEC adapter as inactive source.
[osd] {addr} {string}     set OSD message on the specified device.
[ver] {addr}              get the CEC version of the specified device.
[ven] {addr}              get the vendor ID of the specified device.
[lang] {addr}             get the menu language of the specified device.
[pow] {addr}              get the power status of the specified device.
[name] {addr}             get the OSD name of the specified device.
[poll] {addr}             poll the specified device.
[lad]                     lists active devices on the bus
[ad] {addr}               checks whether the specified device is active.
[at] {type}               checks whether the specified device type is active.
[sp] {addr}               makes the specified physical address active.
[spl] {addr}              makes the specified logical address active.
[volup]                   send a volume up command to the amp if present
[voldown]                 send a volume down command to the amp if present
[mute]                    send a mute/unmute command to the amp if present
[self]                    show the list of addresses controlled by libCEC
[scan]                    scan the CEC bus and display device info
[mon] {1|0}               enable or disable CEC bus monitoring.
[log] {1 - 31}            change the log level. see cectypes.h for values.
[ping]                    send a ping command to the CEC adapter.
[bl]                      to let the adapter enter the bootloader, to upgrade
                          the flash rom.
[r]                       reconnect to the CEC adapter.
[h] or [help]             show this help.
[q] or [quit]             to quit the CEC test client and switch off all
                          connected CEC devices.
================================================================================
